<script
  src="{{ 'component-cart-items.js' | asset_url }}"
  type="module"
></script>

<div
  {{ block.shopify_attributes }}
  class="cart-items__wrapper"
  {% if settings.product_title_case == 'uppercase' %}
    style="--product-title-case: uppercase;"
  {% endif %}
>
  {% if cart.empty? %}
    {%- if shop.customer_accounts_enabled and customer == null -%}
      <p>
        {{ 'actions.log_in_html' | t: link: routes.account_login_url }}
      </p>
    {%- endif -%}

    <a
      class="button cart-items__empty-button"
      href="{{ routes.all_products_collection_url }}"
    >
      {{ 'actions.continue_shopping' | t }}
    </a>
  {%- else -%}
    <span
      class="visually-hidden"
      ref="cartItemCount"
      aria-hidden="true"
    >
      {{- cart.item_count -}}
    </span>
    <form
      action="{{ routes.cart_url }}"
      class="cart-form"
      id="cart-form"
      method="post"
    >
      <div
        class="cart-items spacing-style{% if block.settings.dividers %} cart-items--dividers{% endif %}"
        style="{%  render 'spacing-style', settings: block.settings %} --cart-items-gap:{{ block.settings.gap | append: "px" }};"
      >
        <table
          class="cart-items__table"
          role="table"
        >
          <caption
            class="visually-hidden"
            role="caption"
          >
            {{ 'content.cart_total' | t }}
            <span>{{ cart.total_price | money_with_currency }}</span>
          </caption>

          <thead
            role="rowgroup"
          >
            <tr
              role="row"
              class="cart-items__table-row"
            >
              <th
                id="productInformation"
                scope="col"
                role="columnheader"
                class="cart-items__product"
              >
                {{ 'content.product_information' | t }}
              </th>
              <th
                id="size"
                scope="col"
                role="columnheader"
              >
                {{ 'content.size' | t }}
              </th>
              <th
                id="quantity"
                scope="col"
                role="columnheader"
              >
                {{ 'content.quantity' | t }}
              </th>
              <th
                id="productTotal"
                scope="col"
                role="columnheader"
              >
                {{ 'content.product_total' | t }}
              </th>
            </tr>
          </thead>

          <tbody role="rowgroup">
            {% for item in cart.items %}
              <tr
                role="row"
                class="cart-items__table-row"
                ref="cartItemRows[]"
                data-variants='{{ item.product.variants | json | escape }}'
                data-option-names='{{ item.product.options | json | escape }}'
              >
                <td
                  class="cart-items__product"
                  role="cell"
                  headers="productInformation"
                >
                {% if item.image -%}
                    {% liquid
                      assign ratio = 1
                      if block.settings.image_ratio == 'portrait'
                        assign ratio = 0.8
                      elsif block.settings.image_ratio == 'adapt'
                        assign ratio = item.image.aspect_ratio
                      endif
                    %}
                    <a
                      href="{{ item.url }}"
                      class="cart-items__media-container"
                      style="--ratio:{{ ratio }};"
                    >
                      {%- liquid
                        echo item.image | image_url: width: 250 | image_tag: class: 'cart-items__media-image'
                      -%}
                    </a>
                  {%- endif %}
                  <div class="cart-items__details cart-primary-typography">
                    <p class="cart-items__vendor">
                        {{- item.product.vendor -}}
                    </p>
                    <p>
                      <a
                        href="{{ item.url }}"
                        class="cart-items__title"
                      >
                        {{- item.product.title -}}
                      </a>
                    </p>
                    {% if item.product.vendor and block.settings.vendor %}
                      <p>
                        {{ item.product.vendor }}
                      </p>
                    {% endif %}

                    {%- if item.item_components.size != 0 -%}
                      <ul class="cart-items__bundle list-unstyled">
                        {%- for component in item.item_components -%}
                          <li>
                            {{- component.title -}}
                            {%- if component.quantity > 1 -%}
                              <span> × {{ component.quantity }}</span>
                            {%- endif -%}
                          </li>
                        {%- endfor -%}
                      </ul>
                    {%- endif -%}

                    {%- if item.product.has_only_default_variant == false
                      or item.properties.size != 0
                      or item.selling_plan_allocation != null
                    -%}
                      <dl class="cart-items__variants">
                        {%- if item.product.has_only_default_variant == false and item.item_components.size == 0 -%}
                          {%- for option in item.options_with_values -%}
                            <div class="cart-items__variant">
                              <dt class="visually-hidden">{{ option.name }}:</dt>
                              <dd>
                                {{- option.value -}}
                                {%- if forloop.last != true %},&nbsp;{% endif -%}
                              </dd>
                            </div>
                          {%- endfor -%}
                        {%- endif -%}

                        {%- for property in item.properties -%}
                          {%- assign property_first_char = property.first | slice: 0 -%}
                          {%- if property.last != blank and property_first_char != '_' -%}
                            <div class="cart-items__properties">
                              <dt class="visually-hidden">{{ property.first }}:</dt>
                              <dd>
                                {%- if property.last contains '/uploads/' -%}
                                  <a href="{{ property.last }}">{{ property.last | split: '/' | last }}</a>
                                {%- else -%}
                                  {{ property.last }}
                                {%- endif -%}
                              </dd>
                            </div>
                          {%- endif -%}
                        {%- endfor -%}
                      </dl>

                      {% if item.selling_plan_allocation %}
                        <p>{{ item.selling_plan_allocation.selling_plan.name }}</p>
                      {% endif %}
                    {%- endif -%}

                    {% if item.line_level_discount_allocations.size > 0 %}
                      <ul
                        class="list-unstyled"
                        role="list"
                      >
                        {%- for discount in item.line_level_discount_allocations -%}
                          <li>{{ discount.discount_application.title | escape }}</li>
                        {%- endfor -%}
                      </ul>
                    {% endif %}

                    <div>
                      {% if item.original_price != item.final_price %}
                        <span class="visually-hidden">{{ 'content.price_sale' | t }}</span>
                        <span>{{ item.final_price | money }}</span>
                        <span class="visually-hidden">{{ 'content.price_regular' | t }}</span>
                        <s class="compare-at-price">
                          {% if item.variant.compare_at_price > item.original_price %}
                            {{ item.variant.compare_at_price | money }}
                          {% else %}
                            {{ item.original_price | money }}
                          {% endif %}
                        </s>
                      {% else %}
                        {% if item.variant.compare_at_price > item.original_price %}
                          <span class="visually-hidden">{{ 'content.price_sale' | t }}</span>
                        {% else %}
                          <span class="visually-hidden">{{ 'content.price' | t }}</span>
                        {% endif %}

                        <span>{{ item.original_price | money }}</span>

                        {% if item.variant.compare_at_price > item.original_price %}
                          <span class="visually-hidden">{{ 'content.price_regular' | t }}</span>
                          <s class="compare-at-price">{{ item.variant.compare_at_price | money }}</s>
                        {% endif %}
                      {% endif %}
                    </div>
                  </div>
                </td>
                <td
                  class="cart-items__size"
                  role="cell"
                  headers="size"
                >
                  {% assign size_index = nil %}
                    {% for opt in item.product.options %}
                      {% if opt == 'Size' %}
                        {% assign size_index = forloop.index0 %}
                      {% endif %}
                    {% endfor %}

                    {% if size_index != nil %}
                      {% assign current_size = item.variant.options[size_index] %}

                      <select
                        class="cart-size-select"
                        data-line-key="{{ item.key }}"
                        data-current-options='{{ item.variant.options | json }}'>

                        {% for value in item.product.options_by_name['Size'].values %}
                          {% assign variant_id = blank %}
                          {% for variant in item.product.variants %}
                            {% if variant.options[size_index] == value %}
                              {% assign variant_id = variant.id %}
                            {% endif %}
                          {% endfor %}

                          <option
                            value="{{ value }}"
                            data-variant-id="{{ variant_id }}"
                            {% if value == current_size %}selected disabled{% endif %}
                          >
                            {{ value }}
                          </option>
                        {% endfor %}
                      </select>
                    {% endif %}
                </td>
                <td
                  class="cart-items__quantity"
                  role="cell"
                  headers="quantity"
                >
                  {% # Here I want to pass some arguments to the quantity block so it knows which value should the input be set to. Though quantity block could be a snippet instead %}
                  {% render 'quantity-selector',
                    product: item.product,
                    in_cart_quantity: item.quantity,
                    line_index: item.index,
                    min: 0,
                    class: 'cart-primary-typography'
                  %}
                </td>
                <td
                  class="cart-items__price cart-secondary-typography"
                  role="cell"
                  headers="productTotal"
                >
                  {%- liquid
                    if settings.currency_code_enabled_cart_items
                      assign price = item.final_line_price | money_with_currency
                      assign unit_price = item.unit_price | money_with_currency
                    else
                      assign price = item.final_line_price | money
                      assign unit_price = item.unit_price | money
                    endif
                  -%}
                  <text-component value="{{ price | strip_html }}">{{ price }}</text-component>
                  {%- if item.variant.available and item.unit_price_measurement -%}
                    <div class="cart-items__price-unit cart-secondary-typography">
                      {% render 'unit-price', variant: item.variant, price: unit_price %}
                    </div>
                  {%- endif -%}
                </td>

                <td
                  class="cart-items__error hidden"
                  role="cell"
                  ref="cartItemErrorContainer-{{ item.index | plus: 1 }}"
                  headers="quantity"
                >
                  <div
                    class="cart-item__error"
                    role="alert"
                  >
                    <span class="svg-wrapper">
                      {{- 'icon-error.svg' | inline_asset_content -}}
                    </span>
                    <small
                      class="cart-item__error-text cart-primary-typography"
                      ref="cartItemError-{{ item.index | plus: 1 }}"
                    ></small>
                  </div>
                </td>
                <td class="cart-items__bottom">
                  <button
                    class="button button--tertiary cart-items__duplicate"
                    type="button"
                    aria-label="{{ 'accessibility.remove_item' | t: title: item.title | escape }}"
                  >
                    <span>{{ 'actions.duplicate' | t }}</span>
                  </button>
                  <button
                    class="button button--tertiary cart-items__remove"
                    type="button"
                    aria-label="{{ 'accessibility.remove_item' | t: title: item.title | escape }}"
                    on:click="/onLineItemRemove/{{ item.index | plus: 1 }}"
                  >
                    <span>{{ 'actions.delete' | t }}</span>
                  </button>
                </td>
              </tr>
            {% endfor %}
          </tbody>
        </table>
      </div>
    </form>
  {%- endif -%}
</div>

{% stylesheet %}
  .cart-items {
    --cart-item-media-width-min: 2.5rem;
    --cart-item-media-width-max: 7.5rem;

    container-name: cart-items;
    container-type: inline-size;
    width: 100%;
  }

  .cart-items-disabled {
    pointer-events: none;
  }

  .cart-items__table {
    width: 100%;
  }

  .cart-items__table * {
    margin: 0;
  }

  .cart-items__table-row {
    /* --cart-item-price-width: 6rem;

    display: grid;
    grid-template-columns: clamp(2.5rem, 15cqi, 7.5rem) minmax(0, 1fr) minmax(var(--cart-item-price-width), auto);
    grid-template-areas:
      'media details price'
      'media quantity price'
      'media error error'; */
    display: flex;
    column-gap: var(--gap-md);
    align-items: start;
    padding-bottom: var(--cart-items-gap);
    margin-bottom: var(--margin-lg);
    flex-wrap: wrap;
  }

  @media(min-width: 750px) {
    .cart-items__table-row {
      flex-wrap: nowrap;
    }
  }

  .cart-items__product {
    flex: 1 1 auto;
    display: flex;
    gap: 8px;
  }

   .cart-items__table-row {
    position: relative;
   }

  .cart-items__table-row th:not(.cart-items__product),
  .cart-items__table-row td:not(.cart-items__product) {
    width: 90px;
    flex-shrink: 0;
  }

  @media(min-width: 1050px) {

    .cart-items__table-row th:not(.cart-items__product),
    .cart-items__table-row td:not(.cart-items__product) {
      width: 136px;
    }


    .cart-items__table-row td {
      padding: 24px 0px;
      min-height: 92px;
    }
  }
  
  .cart-items__table-row td select {
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    width: 100%;
    min-height: 48px;
    border: 1px solid #D2D2D2;
    font-size: 16px;
    color: black;
    line-height: 100%;
    border-radius: 0px;
    position: relative;
    background-image: url("data:image/svg+xml;utf8,<svg fill='gray' height='16' viewBox='0 0 20 20' width='16' xmlns='http://www.w3.org/2000/svg'><path d='M5.516 7.548l4.49 4.488 4.488-4.49a.873.873 0 011.236 1.235l-5.106 5.104a.873.873 0 01-1.236 0L4.39 8.783a.873.873 0 111.236-1.235z'/></svg>");
    background-repeat: no-repeat;
    background-position: right 8px center;
    background-size: 20px;
    cursor: pointer;
    padding: 10px;
  }

  @media(min-width: 1050px) {
    .cart-items__table-row td select {
      text-align: center;
      background-position: right 20px center;
    }
  }

  html:active-view-transition-type(page-navigation) .cart-items__table-row {
    view-transition-name: none !important;
  }

  .cart-items__table-row.removing {
    overflow: hidden;
    animation: removeRow calc(var(--animation-speed) * 2) var(--animation-easing) forwards;
    animation-delay: var(--animation-speed);
  }

  @keyframes removeRow {
    0% {
      height: var(--row-height);
    }

    100% {
      opacity: 0;
      height: 0;
      padding-bottom: 0;
      margin-bottom: 0;
      border-color: transparent;
    }
  }

  .cart-items__table-row:last-child {
    padding-bottom: 0;
  }

  .cart-items--dividers .cart-items__table-row {
    border-bottom: 1px solid var(--color-border);
    margin-bottom: var(--cart-items-gap);
  }

  .cart-items--dividers .cart-items__table-row:last-child {
    border-block-end: none;
    padding-block-end: 0;
    margin-bottom: 0;
  }

  .cart-items__details {
    grid-area: details;
    color: rgb(from var(--color-foreground) r g b / 70%);
  }

  .cart-items__details > * + *,
  .cart-items__bundle li {
    margin-block-start: var(--margin-2xs);
  }

  .cart-items__details * {
    font-size: var(--cart-font-size--sm);
  }

  .cart-items__details a {
    text-decoration: none;
  }

  .cart-items__title {
    font-size: var(--cart-font-size--xs);
    color: var(--color-foreground);
    text-transform: var(--product-title-case);
  }

  .cart-items__vendor {
    font-size: 14px;
    font-weight: 700;
    text-transform: uppercase;
  }

  .cart-items__variant {
    display: inline-block;
  }

  .cart-items__quantity {
    grid-area: quantity;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--gap-xs);
    width: fit-content;
  }

  .cart-items__quantity .quantity-selector {
    display: inline-flex;
    flex: 0 1 var(--quantity-selector-width);
    font-size: var(--cart-font-size--sm);
    height: 44px;
  }

  .cart-drawer__inner .cart-items__quantity {
    display: none;
  }

  .cart-items__remove,
  .cart-items__duplicate {
    background-color: transparent;
    color: var(--color-foreground);
    width: var(--minimum-touch-target);
    height: var(--minimum-touch-target);
    justify-content: center;
    box-shadow: none;
    padding: 0;
  }

  .cart-items__bottom {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .cart-items__media {
    grid-area: media;
    padding: 0;
  }

  .cart-items__price {
    grid-area: price;
    min-height: unset;
    min-width: var(--cart-item-price-width);
    text-align: end;
    display: block;
    font-size: var(--cart-font-size--md);
  }

  .cart-items__price-unit {
    font-size: var(--cart-font-size--xs);
  }

  .cart-items__media-container {
    display: flex;
    aspect-ratio: var(--ratio);
    position: relative;
    width: 120px;
    overflow: hidden;
  }

  .cart-items__media-image {
    aspect-ratio: inherit;
    object-fit: cover;
    object-position: center center;
    width: 100%;
    height: auto;
  }

  .cart-items__empty-button {
    margin-top: var(--margin-md);
    padding-inline: var(--padding-4xl);
    padding-block: var(--padding-lg);
  }

  /* Error message */
  .cart-items__error {
    display: flex;
    align-items: flex-start;
    width: 100%;
    grid-area: error;
    margin-block-start: var(--margin-xs);
    opacity: 1;
    overflow: hidden;
    transform: translateY(0);
    transition: opacity var(--drawer-animation-speed) var(--animation-easing),
      transform var(--drawer-animation-speed) var(--animation-easing);

    @starting-style {
      opacity: 0;
      transform: translateY(-0.5rem);
    }
  }

  .cart-item__error {
    display: flex;
    align-items: flex-start;
    width: 100%;
    font-size: var(--cart-font-size--sm);
    padding-block: var(--padding-2xs);
  }

  .cart-item__error .svg-wrapper {
    flex-shrink: 0;
    width: var(--icon-size-xs);
    height: var(--icon-size-xs);
    margin-inline: var(--margin-3xs) var(--margin-xs);
    margin-block-start: var(--margin-3xs);
  }

  @container cart-items (width >= 720px) {
    /* .cart-items__table-row {
      --cart-item-price-width: 6rem;

      grid-template-columns: 7.5rem 1fr 1fr minmax(var(--cart-item-price-width), auto);
      grid-template-rows: min-content 1fr;
      grid-template-areas:
        'media details quantity price'
        'media details error error';
    } */

    .cart-items__quantity,
    .cart-items__price {
      grid-area: initial;
    }

    .cart-items__quantity {
      margin-top: 0;
    }

    .cart-items__price {
      min-height: var(--minimum-touch-target);
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
    }
  }

  .cart__original-total-container,
  .cart__total-container {
    display: flex;
    flex-direction: column;
  }

  .cart__total-container {
    row-gap: var(--gap-2xs);

    &:has(.cart__installments) {
      row-gap: var(--gap-xs);
    }
  }

  .cart__original-total-container:empty {
    display: none;
  }

  .cart__summary-totals {
    display: flex;
    flex-direction: column;
    gap: var(--gap-xl);
    width: 100%;
    border-block-start: none;

    &:has(> :first-child:not(.cart__original-total-container, .cart__total-container)) {
      padding-block-start: 0;
      border-block-start: none;
    }

    @media screen and (width >= 750px) {
      padding-block-start: 0;
    }
  }

  .cart__original-total-container,
  .cart__original-total-container * {
    font-size: var(--cart-font-size--sm);
  }

  .cart__total {
    font-weight: var(--font-weight-bold);
  }

  .cart__total-label {
    text-transform: uppercase;
    font-size: 16px;
  }

  .cart-drawer__inner .cart__total-label {
    font-size: 14px;
  }

  .cart-drawer__inner .cart__total-value {
    font-size: 16px;
    text-transform: uppercase;
  }

  .cart__total-value {
    font-size: var(--cart-font-size--2xl);
  }

  .cart-primary-typography {
    font-family: var(--cart-primary-font-family);
    font-style: var(--cart-primary-font-style);
    font-weight: var(--cart-primary-font-weight);
  }

  .cart-secondary-typography {
    font-family: var(--cart-secondary-font-family);
    font-style: var(--cart-secondary-font-style);
    font-weight: var(--cart-secondary-font-weight);
  }

  .cart__ctas {
    width: 100%;
    display: grid;
    gap: var(--checkout-button-gap);
    grid-auto-flow: row;
    grid-template-columns: 1fr;
  }

  .cart__additional-checkout-buttons {
    width: 100%;
  }

  .cart__ctas .cart__checkout-button {
    width: 100%;
    height: clamp(25px, var(--height-buy-buttons), 55px);
    padding-inline: var(--padding-4xl);
    font-size: 20px;
  }

  shopify-accelerated-checkout-cart {
    --shopify-accelerated-checkout-inline-alignment: center;
    --shopify-accelerated-checkout-button-border-radius: var(--style-border-radius-buttons-primary);
  }

  .cart-note {
    width: 100%;
  }

  .cart-note__inner {
    padding-block: var(--padding-2xs) var(--padding-sm);
  }

  .cart-note__summary {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .cart-note__summary:hover {
    color: rgb(from var(--color-foreground) r g b / var(--opacity-subdued-text));
  }

  .cart-note__label {
    display: flex;
    align-items: flex-start;
    gap: var(--gap-2xs);
    font-size: var(--cart-font-size--sm);
  }

  .cart-note__instructions {
    color: var(--color-input-text);
    background-color: var(--color-input-background);
    border-width: var(--style-border-width-inputs);
    border-color: var(--color-input-border);
    transition: box-shadow var(--animation-speed) ease;
    box-shadow: var(--input-box-shadow);
    min-height: 5.5rem;
    min-width: 100%;
    max-width: 100%;
    font-size: var(--cart-font-size--sm);
    padding: max(4px, calc(var(--style-border-radius-inputs) * (1 - cos(45deg))));
  }

  .cart-note .svg-wrapper {
    height: var(--icon-size-sm);
    width: var(--icon-size-sm);
    margin: 0;
  }

  .cart-note .icon-plus {
    height: var(--icon-size-xs);
    width: var(--icon-size-xs);
  }

  /* Remove animation */
  .remove-icon-bottom,
  .remove-icon-top {
    transition: transform var(--animation-speed) var(--animation-easing);
  }

  .cart-items__remove:hover .remove-icon-top {
    transform: translate(calc(-1 * var(--icon-stroke-width)), var(--icon-stroke-width)) rotate(-15deg);
  }

  .cart-items__remove:is(:hover, :active) .remove-icon-bottom {
    transform: translateY(var(--icon-stroke-width));
  }

  .cart-items__table-row.removing .remove-icon-bottom {
    transform: translateY(0);
  }

  .cart-items__table-row.removing .remove-icon-top {
    animation: removeButtonClickedIconTop var(--animation-speed) var(--animation-easing) forwards;
  }

  @keyframes removeButtonClickedIconTop {
    50% {
      transform: translate(0, calc(-1 * var(--icon-stroke-width)));
    }

    100% {
      transform: translate(0, 0);
    }
  }

  .cart-items__table thead th {
    padding: 17px;
    text-align: center;
    font-size: 16px;
    font-weight: 400;
  }

  .cart-items__table thead th.cart-items__product {
    justify-content: center;
  }

  .cart-items__table thead tr {
    display: none !important;
    background-color: #F2F2F2;
    border-top: 1px solid #E6E6E6;
    border-bottom: 1px solid #E6E6E6;
  }

  @media(min-width: 750px) {
    .cart-items__table thead tr {
      display: flex !important;
    }
  }

  .cart-items__bottom {
    position: absolute;
    width: fit-content !important;
    bottom: 10px;
    right: 10px;
    z-index: 3;
  }

  .cart-items__remove,
  .cart-items__duplicate {
    text-decoration: underline;
  }

  @media(max-width: 749px) {
    .cart-items__table-row td:not(:first-child) {
      padding: 0px;
    }

    .cart-items__table-row {
      align-items: center;
      gap: 10px;
    }

    .cart-items__bottom {
      position: static;
    }

    .cart-items__size {
      width: 65px !important;
    }

    .cart-items__price {
      font-size: 14px;
    }
  }
{% endstylesheet %}

<script>
  document.addEventListener('DOMContentLoaded', () => {
    document.addEventListener('change', async function (e) {
      const select = e.target;
      if (!select.classList.contains('cart-size-select')) return;
    
      const row = select.closest('tr');
      if (!row) return;
    
      const lineKey = select.dataset.lineKey;
      const newSize = select.value;
    
      let currentOptions = [];
      let variants = [];
      let optionNames = [];
    
      try {
        currentOptions = JSON.parse(select.dataset.currentOptions || '[]');
        variants = JSON.parse(row.dataset.variants || '[]');
        optionNames = JSON.parse(row.dataset.optionNames || '[]');
      } catch (err) {
        console.error('❌ Ошибка при разборе JSON:', err);
        return;
      }
    
      // Получаем текущее количество из input
      const quantityInput = row.querySelector('.quantity-selector input[type="number"]');
      const quantity = parseInt(quantityInput?.value, 10) || 1;
    
      // Найти индекс опции "Size"
      const sizeIndex = optionNames.findIndex(opt => opt.toLowerCase() === 'size');
      if (sizeIndex === -1) {
        console.warn('⚠️ Опция "Size" не найдена');
        return;
      }
    
      // Заменить значение размера в текущих опциях
      currentOptions[sizeIndex] = newSize;
    
      // Найти подходящий вариант
      const matched = variants.find(variant =>
        variant.options.every((opt, i) => opt === currentOptions[i])
      );
    
      if (!matched) {
        alert('❌ Обраний розмір недоступний для даних опцій');
        return;
      }
    
      const newVariantId = matched.id;
    
      // Удалить текущий вариант
      await fetch('/cart/change.js', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: lineKey, quantity: 0 }),
      });
    
      // Добавить новый вариант с тем же количеством
      await fetch('/cart/add.js', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: newVariantId, quantity }),
      });
    
      location.reload();
    });

    document.querySelectorAll('.cart-items__duplicate').forEach((btn) => {
      btn.addEventListener('click', async (e) => {
        const row = e.target.closest('tr');
        if (!row) return;
  
        const optionNames = JSON.parse(row.dataset.optionNames || '[]');
        const variants = JSON.parse(row.dataset.variants || '[]');
        const sizeSelect = row.querySelector('.cart-size-select');
        
        // Получаем текущие значения всех опций
        let currentOptions = JSON.parse(sizeSelect.dataset.currentOptions || '[]');
        
        // Найти нужный вариант
        const matchedVariant = variants.find(variant =>
          variant.options.every((opt, i) => opt === currentOptions[i])
        );
        
        const variantId = matchedVariant?.id;
        
        if (!variantId) {
          console.warn('❌ Не удалось найти подходящий вариант для дубликата');
          return;
        }
    
        // Створюємо унікальну властивість, щоб Shopify не обʼєднав
        const uniqueProperty = `_duplicate_uuid_${Date.now()}_${Math.floor(Math.random() * 1000)}`;
  
        await fetch('/cart/add.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            id: variantId,
            quantity: 1,
            properties: {
              [uniqueProperty]: 'true'
            }
          }),
        });
  
        location.reload();
      });
    });
  });
</script>